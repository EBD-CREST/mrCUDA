#!/usr/bin/python

import sys
import os
import subprocess
from optparse import OptionParser

def parse_args():
    parser = OptionParser(usage = '%prog -s SERVER [options] -- PROGRAM')
    parser.add_option('-t', '--network-type', dest = 'network_type',
        choices = ['IB', 'TCP',],
        default = 'TCP',
        help = 'type of network for rCUDA (IB, TCP) [default = TCP].'
    )
    parser.add_option('-n', '--number-of-devices', type = 'int',
        default = 1,
        dest = 'number_of_devices',
        help = 'number of GPU devices to be used [default = 1].'
    )
    parser.add_option('-s', '--server',
        dest = 'server_address',
        help = 'rCUDA server address.',
    )
    parser.add_option('-p', '--port', type = 'int',
        default = 8308,
        dest = 'port',
        help = 'Port number [default = 8308].',
    )
    parser.add_option('-f', '--server-file',
        dest = 'server_file',
        help = 'rCUDA server file.'
    )

    options, args = parser.parse_args()
    if not options.server_address and not options.server_file:
        parser.error('either -s or -f option is required.')
    elif options.server_address and options.server_file:
        parser.error('-s and -f options cannot be used at the same time.')
    if len(args) == 0:
        parser.error('Please specify PROGRAM to execute.')
    return options, args

def main(options, args):
    framework_directory = os.path.dirname(os.path.abspath(__file__))
    rCUDAl_directory = os.path.join(framework_directory, 'rCUDAl') 
    ld_lib_path = rCUDAl_directory

    program_args = args

    environment = os.environ.copy()
    if 'LD_LIBRARY_PATH' in environment:
        ld_lib_path = ld_lib_path + ':' + environment.get('LD_LIBRARY_PATH')

    environment['LD_LIBRARY_PATH'] = ld_lib_path
    environment['RCUDAPROTO'] = options.network_type
    environment['RCUDA_DEVICE_COUNT'] = str(options.number_of_devices)

    i = 0
    if options.server_address:
        while i < options.number_of_devices:
            environment['RCUDA_DEVICE_' + str(i)] = options.server_address + '@' + str(options.port) + ':' + str(i)
            i += 1
    else:
        f = open(options.server_file, 'r')
        server_lists = f.readlines()
        f.close()

        server_lists = [s.strip() for s in server_lists if len(s.strip()) > 0]
        if len(server_lists) == 0:
            raise Exception('Server file does not contain any server information.')

        j = 0
        while i < options.number_of_devices:
            environment['RCUDA_DEVICE_' + str(i)] = server_lists[j]
            j += 1
            if j >= len(server_lists):
                j = 0
            i += 1

    p = subprocess.Popen(
        program_args,
        env = environment
    )
    p.wait()

if __name__ == '__main__':
    options, args = parse_args()
    main(options, args)
